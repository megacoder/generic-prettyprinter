#!/usr/bin/python
# vim: noet sw=4 ts=4

import	sys
import	os

me = 'cups-pp'
nonfatal = 0

class	CupsPrettyprint( object ):

	def	__init__( self ):
		self.depth = 0
		self.comment_column = 40
		self.leadin = '  '
		self.out = sys.stdout
		return

	def	do_dir( self, dn ):
		files = os.listdir( dn )
		files.sort()
		for file in files:
			path = os.path.join( dn, file )
			if os.path.isdir( path ):
				self.do_dir( path )
			elif os.path.isfile( path ):
				self.do_file( path )
			else:
				pass
		return

	def	do_file( self, fn ):
		try:
			fd = open( fn, 'rt' )
		except Exception, e:
			print >>sys.stderr, 'Cannot open "%s" for reading.' % fn
			raise e
		self.process( fd )
		fd.close()
		return

	def	indent( self, content, comment ):
		# Indent content first
		line = (self.leadin * self.depth) + content
		# Align comments before writing line
		if len(comment) > 0:
			line = line + (' '*max( 1, 40 - len(line))) + '# ' + comment
		print >>self.out, line
		return

	def	process( self, fd = sys.stdin ):
		for line in fd:
			parts = line.strip().split( '#', 1 )
			l = len(parts)
			if l == 0:
				# Blank line
				print >>self.out
				continue
			if l == 1:
				content = parts[0]
				comment = ''
			else:
				content = parts[0]
				comment = parts[1]
			content = parts[0]
			if len(content) == 0:
				# No content, treat comment as content
				self.indent( '#' + comment, '' )
				continue
			# Align args after command
			parts = content.split( ' ', 1 )
			if len(parts) == 1:
				verb = parts[0]
				args = ''
			else:
				verb = parts[0]
				args = parts[1]
			content = '%-15s %s' % (verb, args)
			if not content.startswith( '<' ):
				# Non-directive line
				self.indent( content, comment )
			else:
				# Directive line
				if content.startswith( '</' ):
					# pop: move left, then print end-directive
					self.depth = max( 0, self.depth - 1 )
					self.indent( content,  comment )
				else:
					# push: print, then move right
					parts = content[:-1].split()
					if len(parts) > 1:
						verb = parts[0]
						args = parts[1:]
						args.sort()
						content = '%-15s %s>' % ( verb, ' '.join(args))
					self.indent( content, comment )
					self.depth += 1
		return

	def	report( self, out = sys.stdout ):
		return

if __name__ == '__main__':
	me = os.path.basename( sys.argv[0] )
	cpp = CupsPrettyprint()
	if len( sys.argv ) == 1:
		cpp.process()
	else:
		for fn in sys.argv[1:]:
			if os.path.isdir( fn ):
				cpp.do_dir( fn )
			elif os.path.isfile( fn ):
				cpp.do_file( fn )
			else:
				print >>sys.stderr, "Don't know what to do with \"%s\"." % fn
				nonfatal += 1
	cpp.report()
	exit( 1 if nonfatal > 0 else 0 )
