#!/usr/bin/python

import	os
import	sys
import	stat

class	SlabinfoPrettyPrint( object ):

	def	__init__( self ):
		self._clear_all()
		return

	def	_clear_all( self ):
		self.fmt = ''
		self.tokens = []
		self.maxname = 23
		return

	def	do_name( self, name ):
		if stat.S_ISREG( name ):
			try:
				f = open( name, 'rt' )
			except Exception, e:
				print >>sys.stderr, 'Cannot open "%s" for reading.' % name
				raise e
			self.do_file( f )
			f.close()
		elif stat.S_ISDIR( name ):
			self.do_dir( name )
		else:
			print >>sys.stderr, 'Ignoring unknown file "%s".' % name
		return

	def	do_dir( self, dn ):
		try:
			files = os.listdir( dn )
		except Exception, e:
			print >>sys.stderr, 'Cannot read directory "%s".' % dn
			raise e
		files.sort()
		for name in files:
			self.do_name( name )
		return

	def	do_file( self, f ):
		lineno = 0
		for line in f:
			lineno += 1
			if lineno == 1:
				print line.strip()
			elif lineno == 2:
				if line[0] != '#':
					printf >>sys.stderr, 'Format error.'
					raise IOError
				tokens = line.rstrip().split()
				if len(tokens) < 2:
					printf >>sys.stderr, 'Title format error.'
					raise IOError
				tokens = [ '# Name' ] + tokens[2:]
				self.fmts = []
				for token in tokens:
					l = len(token)
					self.fmts.append( '%%%d.%ds ' % (l, l) )
				self.tokens.append( tokens )
				# self.print_tokens( fmts, tokens )
			else:
				tokens = line.rstrip().split()
				if len(tokens) > 0:
					self.maxname = max( self.maxname, len(tokens[0]) )
				self.tokens.append( tokens )
				# self.print_tokens( fmts, tokens )
		return

	def	print_tokens( self ):
		self.fmts[0] = '%%%d.%ds' % (self.maxname, self.maxname)
		for tokens in self.tokens:
			for fmt in self.fmts:
				try:
					token = tokens.pop(0)
				except Exception, e:
					token = 'N/A'
				print fmt % token,
			print
		self._clear_all()
		return

if __name__ == '__main__':
	spp = SlabinfoPrettyPrint()
	if len(sys.argv) == 1:
		spp.do_file( sys.stdin )
		spp.print_tokens()
	else:
		for fn in sys.argv[1:]:
			try:
				f = open( fn, 'rt' )
			except Exception, e:
				print >>sys.err, 'Cannot open "%s" for reading.' % fn
				raise e
			spp.do_file( f )
			f.close()
			spp.print_tokens()
	exit(0)
