#!/usr/bin/python

import  pprint
import  sys

class   Ifcfg( object ):

    def __init__( self, file = sys.stdin, name = '<stdin>', out = sys.stdout ):
        self.fyle     = file
        self.fn       = name
        self.out      = out
        self.prolog   = []
        self.settings = []
        self.fmt      = '%s=%s'
        self.pp       = pprint.PrettyPrinter( indent=0 )
        return

    def read( self ):
        equals = -1
        try:
            for line in self.fyle:
                if line.startswith( '#' ):
                    self.prolog.append( line.rstrip() )
                else:
                    pos = line.find( '=' )
                    if pos == -1:
                        # No equals, how odd...
                        print >>sys.stderr, 'Line [%s] has no equal!' % line[:-1]
                    else:
                        if pos > equals:
                            equals = pos
                        name = line[:pos]
                        value = line[pos+1:-1]
                        self.settings.append( (name,value) )
        except Exception, e:
            print >>sys.stderr, '%s' % e
            raise e
        self.fmt = '%%%ds=%%s' % equals
        return

    def compile( self ):
        self.settings.sort( key = lambda (n,v): n.upper() )
        return

    def reconstruct( self, out = None ):
        if out == None:
            out = self.out
        for line in self.prolog:
            print >>out, '%s' % line
        for name,value in self.settings:
            print >>out, self.fmt % (name, value)
        return

if __name__ == '__main__':
    import  optparse
    import  os
    import  sys

    p = optparse.OptionParser(
        description = """Display a NIC configuration file (ifcfg-eth0) in canonical form.
The output is sorted by keyword.""",
        usage = '%prog [-o ofile] [ifcfg-eth0]',
        prog = os.path.basename( sys.argv[0] )
    )
    p.add_option(
        '-o',
        '--output',
        action='store',
        type='string',
        dest='ofile',
        help = 'Output written to file; defaults to stdout.'
    )
    p.set_defaults(
        ofile = None
    )
    opt, args = p.parse_args()
    o = sys.stdout
    if opt.ofile:
        try:
            os.unlink( opt.ofile )
        except:
            pass
        try:
            o = open( opt.ofile, 'wt' )
        except:
            print >>sys.stderr, 'Cannot open "%s" for writing.' % opt.ofile
            raise IOError
    if len(args) == 0:
        ifcfg = Ifcfg( out = o )
        ifcfg.read()
        ifcfg.compile()
        ifcfg.reconstruct()
    else:
        multi = len(args) > 1
        for arg in args:
            try:
                if multi:
                    print >>o, '#'
                    print >>o, '# %s' % os.path.abspath( arg )
                    print >>o, '#'
                f = open( arg )
            except:
                raise IOError
            ifcfg = Ifcfg( file = f, out = o )
            ifcfg.read()
            ifcfg.compile()
            ifcfg.reconstruct()
    # The end..

