#!/usr/bin/python

import	os
import	sys
import	stat

class	MeminfoPrettyPrint( object ):

	def	__init__( self ):
		self._clear_all()
		return

	def	_clear_all( self ):
		self.lines = []
		self.maxfield = 12
		self.maxvalue = 12
		return

	def	do_name( self, name ):
		if stat.S_ISREG( name ):
			try:
				f = open( name, 'rt' )
			except Exception, e:
				print >>sys.stderr, 'Cannot open "%s" for reading.' % name
				raise e
			self.do_file( f )
			f.close()
		elif stat.S_ISDIR( name ):
			self.do_dir( name )
		else:
			print >>sys.stderr, 'Ignoring unknown file "%s".' % name
		return

	def	do_dir( self, dn ):
		try:
			files = os.listdir( dn )
		except Exception, e:
			print >>sys.stderr, 'Cannot read directory "%s".' % dn
			raise e
		files.sort()
		for name in files:
			self.do_name( name )
		return

	def	do_file( self, f ):
		for line in f:
			tokens = line.rstrip().split( ':' )
			if len(tokens) == 0: continue
			field = tokens[0].strip()
			value = tokens[1].strip()
			self.maxfield = max( self.maxfield, len(field) )
			if not value.endswith( 'kB' ):
				value = value + '   '
			self.maxvalue = max( self.maxvalue, len(value) )
			self.lines.append( (field, value) )
		return

	def	print_lines( self ):
		fmt = '%%-%ds %%%ds' % (self.maxfield+1, self.maxvalue)
		for (field, value) in self.lines:
			print fmt % (field + ':', value)
		return

if __name__ == '__main__':
	mipp = MeminfoPrettyPrint()
	if len(sys.argv) == 1:
		mipp.do_file( sys.stdin )
	else:
		for fn in sys.argv[1:]:
			try:
				f = open( fn, 'rt' )
			except Exception, e:
				print >>sys.err, 'Cannot open "%s" for reading.' % fn
				raise e
			mipp.do_file( f )
			f.close()
	mipp.print_lines()
	exit(0)
