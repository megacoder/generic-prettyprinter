#!/usr/bin/python
# vim: sw=4 ts=4 noet

import	os
import	sys
import	stat

class	OcfsPrettyPrint( object ):

	def	__init__( self ):
		self._new_stanza()
		self.out = sys.stdout
		return

	def	set_output( self, f ):
		self.out = f
		return

	def	_new_stanza( self ):
		self.content = []
		self.longest = 15
		return

	def	_dump_stanza( self ):
		fmt = ' %%%ds = %%s' % self.longest
		self.content.sort( key = lambda (n,v): n.upper() )
		for (name,value) in self.content:
			print >>self.out, fmt % (name, value)
		self._new_stanza()
		return

	def	_out_header( self, line ):
		self._dump_stanza()
		print >>self.out, line
		return

	def	do_name( self, name ):
		try:
			mode = os.stat( name )[stat.ST_MODE]
		except Exception, e:
			print >>sys.stderr, 'Cannot stat "%s".' % name
			raise e
		if stat.S_ISREG( mode ):
			try:
				f = open( name, 'rt' )
			except Exception, e:
				print >>sys.stderr, 'Cannot open "%s".' % name
				raise e
			self.process( f )
			f.close()
		elif stat.S.ISDIR( mode ):
			self.do_dir( name )
		return

	def	do_dir( self, name ):
		try:
			files = os.listdir( name )
		except Exception, e:
			print >>sys.stderr, 'Cannot list directory "%s".' % name
			raise e
		files.sort()
		for file in files:
			self.do_name( file )
		return

	def process( self, fyle ):
		self._new_stanza()
		for line in fyle:
			if line[0].isspace() is not True:
				self._out_header( line.rstrip() )
			else:
				parts = line.strip().split( '=', 1 )
				if len(parts) < 2:
					self._out_header( line.rstrip() )
					continue
				name = parts[0].strip()
				value = parts[1].strip()
				self.longest = max( self.longest, len(name) )
				self.content.append( (name,value) )
		self._dump_stanza()
		return

if __name__ == '__main__':
	import	optparse

	p = optparse.OptionParser(
		description = """Display an Oracle OCFS2 cluster.conf file in canonical format.""",
		usage = '%prog [-o ofile] [file]',
		prog = os.path.basename( sys.argv[0] )
	)
	p.add_option(
		'-o',
		'--output',
		action='store',
		type='string',
		dest='ofile',
		help = 'Output written to file; defaults to stdout.'
	)
	p.set_defaults(
		ofile = None
	)
	opt, args = p.parse_args()
	o = sys.stdout
	if opt.ofile:
		try:
			os.unlink( opt.ofile )
		except:
			pass
		try:
			o = open( opt.ofile, 'wt' )
		except:
			print >>sys.stderr, 'Cannot open "%s" for writing.' % opt.ofile
			raise IOError
	if len(args) == 0:
		opp = OcfsPrettyPrint()
		opp.set_output( o )
		opp.do_name( '/etc/ocfs2/cluster.conf' )
	else:
		for arg in args:
			opp = OcfsPrettyPrint()
			opp.set_output( o )
			if arg == '-':
				opp.process( sys.stdin )
			else:
				opp.do_name( arg )
	# The end..
