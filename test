#!/usr/bin/python
import	os
import	sys
import	tokenize
import  StringIO

s = 'a=[1,2,3];s="foo";b=((3*(2*a)));'

level = 0

def run( spelling, rule = 'p' ):
    global  level
    for action in rule:
        # print '[{0}]'.format( action ),
        if action == 'i':
            level += 1
        elif action == 'd':
            level -= 1
        elif action == 'n':
            sys.stdout.write( '\n' )
        elif action == 'r':
            sys.stdout.write(
                '{0}'.format(
                    '___' * level
                )
            )
        elif action == 'p':
            sys.stdout.write(
                '{0}'.format( spelling )
            )
        else:
            print 'Huh? ({0})'.format( action )
    return

prev_token  = None
need_indent = False
prev_token  = None
was_op      = False

default_rule = 'rp'
for toknum,spelling,_,_,_ in tokenize.generate_tokens( StringIO.StringIO(s).readline):
    rule = default_rule
    default_rule = None
    # What do we have?
    if toknum == tokenize.OP:
        if spelling == '[':
            rule = 'pin'
            default_rule = 'rp'
        elif spelling == ']':
            rule = 'dnp'
        elif spelling == ',' or spelling == ';':
            rule = 'p'
            default_rule = 'nrp'
        else:
            if was_op:
                spelling = '{0} '.format( spelling )
            else:
                spelling = ' {0} '.format( spelling )
            rule = 'p'
            default_rule = 'p'
        was_op = True
    else:
        was_op = False
        default_rule = 'p'
    # Take the actions for this token
    run( spelling, rule  )
    prev_token = spelling
    if not default_rule:
        default_rule = 'rp'
exit(0)
