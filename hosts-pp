#!/usr/bin/python
# vim: noet sw=4 ts=4

import	sys
import	os

me = 'hosts-pp'

class	HostsPrint( object ):

	def	__init__( self, out = None ):
		self.lines = []
		self.out = out
		self.max_canonical = 0
		return

	def	do_file( self, fd = sys.stdin ):
		for line in fd:
			bp = line.find( '#' )
			if bp > -1:
				print >>self.out, '%s' % line.rstrip()
			else:
				tokens = line.strip().split()
				n = len( tokens )
				if n < 2: continue
				addr = tokens[0]
				canonical = tokens[1]
				self.max_canonical = max( self.max_canonical, len(canonical) )
				if n <= 2:
					aliases = []
				else:
					aliases = tokens[2:]
					aliases.sort()
				ip = 0
				if addr.find(':') == -1:
					for octet in addr.split('.'):
						ip = ip * 256 + int(octet)
				self.lines.append(
					(ip, addr, canonical, aliases)
				)
		return

	def	key( self, (ip, addr, canonical, aliases) ):
		return ip

	def	report( self ):
		if self.out is None:
			self.out = sys.stdout
		self.lines.sort( key = self.key )
		fmt = '%%-15s %%-%ds %%s' % self.max_canonical
		for ip, addr, canonical, aliases in self.lines:
			print fmt % (addr, canonical, ' '.join(aliases) )
		self.lines = []
		return

if __name__ == '__main__':
	hp = HostsPrint()
	me = os.path.basename( sys.argv[0] )
	if len( sys.argv ) == 1:
		hp.do_file()
	else:
		for fn in sys.argv[1:]:
			try:
				fd = open( fn, 'rt' )
			except Exception, e:
				print >>sys.stderr, '%s: cannot open "%s" for reading.' % fn
				raise e
			hp.do_file( fd )
			fd.close()
	hp.report()
	exit( 0 );
